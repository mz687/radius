{
  "results": {
    "boolq": {
      "alias": "boolq",
      "acc,none": 0.5776758409785933,
      "acc_stderr,none": 0.008638883260317733
    },
    "cb": {
      "alias": "cb",
      "acc,none": 0.30357142857142855,
      "acc_stderr,none": 0.06199938655510754,
      "f1,none": 0.2887700534759358,
      "f1_stderr,none": "N/A"
    },
    "copa": {
      "alias": "copa",
      "acc,none": 0.76,
      "acc_stderr,none": 0.04292346959909284
    },
    "multirc": {
      "alias": "multirc",
      "acc,none": 0.48824257425742573,
      "acc_stderr,none": 0.007179817248730724
    },
    "record": {
      "alias": "record",
      "f1,none": 0.8527325541125549,
      "f1_stderr,none": 0.003502992895880697,
      "em,none": 0.8446,
      "em_stderr,none": 0.003623036936005855
    },
    "sglue_rte": {
      "alias": "sglue_rte",
      "acc,none": 0.5054151624548736,
      "acc_stderr,none": 0.03009469812323996
    },
    "wic": {
      "alias": "wic",
      "acc,none": 0.5078369905956113,
      "acc_stderr,none": 0.019808287657813835
    },
    "wsc": {
      "alias": "wsc",
      "acc,none": 0.4230769230769231,
      "acc_stderr,none": 0.048679937479186836
    }
  },
  "group_subtasks": {
    "wic": [],
    "sglue_rte": [],
    "boolq": [],
    "multirc": [],
    "record": [],
    "wsc": [],
    "cb": [],
    "copa": []
  },
  "configs": {
    "boolq": {
      "task": "boolq",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "boolq",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "{{passage}}\nQuestion: {{question}}?\nAnswer:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "no",
        "yes"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "passage",
      "metadata": {
        "version": 2.0
      }
    },
    "cb": {
      "task": "cb",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "cb",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "{{premise}}\nQuestion: {{hypothesis}}. True, False, or Neither?\nAnswer:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "True",
        "False",
        "Neither"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        },
        {
          "metric": "f1",
          "aggregation": "def cb_multi_fi(items):\n    from sklearn.metrics import f1_score\n\n    preds, golds = zip(*items)\n    preds = np.array(preds)\n    golds = np.array(golds)\n    f11 = f1_score(y_true=golds == 0, y_pred=preds == 0)\n    f12 = f1_score(y_true=golds == 1, y_pred=preds == 1)\n    f13 = f1_score(y_true=golds == 2, y_pred=preds == 2)\n    avg_f1 = np.mean([f11, f12, f13])\n    return avg_f1\n"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "copa": {
      "task": "copa",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "copa",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "def doc_to_text(doc):\n    # Drop the period\n    connector = {\n        \"cause\": \"because\",\n        \"effect\": \"therefore\",\n    }[doc[\"question\"]]\n    return doc[\"premise\"].strip()[:-1] + f\" {connector}\"\n",
      "doc_to_target": "def doc_to_target(doc):\n    correct_choice = doc[\"choice1\"] if doc[\"label\"] == 0 else doc[\"choice2\"]\n    # Connect the sentences\n    return \" \" + convert_choice(correct_choice)\n",
      "doc_to_choice": "def doc_to_choice(doc):\n    return [\" \" + convert_choice(doc[\"choice1\"]), \" \" + convert_choice(doc[\"choice2\"])]\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "multirc": {
      "task": "multirc",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "multirc",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "{{paragraph}}\nQuestion: {{question}}\nAnswer:",
      "doc_to_target": "label",
      "doc_to_choice": "['''{{answer}}\\nIs the answer correct? yes''', '''{{answer}}\\nIs the answer correct? no''']",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "record": {
      "task": "record",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "record",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset):\n    def _process_doc(doc):\n        return {\n            \"passage\": doc[\"passage\"],\n            \"query\": doc[\"query\"],\n            \"entities\": sorted(list(set(doc[\"entities\"]))),\n            \"answers\": sorted(list(set(doc[\"answers\"]))),\n        }\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc):\n    initial_text, *highlights = doc[\"passage\"].strip().split(\"\\n@highlight\\n\")\n    text = initial_text + \"\\n\\n\"\n    for highlight in highlights:\n        text += f\"  - {highlight}.\\n\"\n    return text\n",
      "doc_to_target": "def doc_to_target(doc):\n    # We only output the first correct entity in a doc\n    return format_answer(query=doc[\"query\"], entity=doc[\"answers\"][0])\n",
      "doc_to_choice": "def doc_to_choice(doc):\n    return [format_answer(query=doc[\"query\"], entity=ans) for ans in doc[\"entities\"]]\n",
      "process_results": "def process_results(doc, results):\n    # ReCoRD's evaluation is actually deceptively simple:\n    # - Pick the maximum likelihood prediction entity\n    # - Evaluate the accuracy and token F1 PER EXAMPLE\n    # - Average over all examples\n    max_idx = np.argmax(np.array([result[0] for result in results]))\n\n    prediction = doc[\"entities\"][max_idx]\n    gold_label_set = doc[\"answers\"]\n    f1 = metric_max_over_ground_truths(\n        squad_metrics.compute_f1, prediction, gold_label_set\n    )\n    em = metric_max_over_ground_truths(\n        squad_metrics.compute_exact, prediction, gold_label_set\n    )\n\n    return {\n        \"f1\": f1,\n        \"em\": em,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "f1",
          "aggregation": "mean"
        },
        {
          "metric": "em",
          "higher_is_better": true,
          "aggregation": "mean"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "sglue_rte": {
      "task": "sglue_rte",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "rte",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "{{premise}}\nQuestion: {{hypothesis}} True or False?\nAnswer:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "True",
        "False"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 0.0
      }
    },
    "wic": {
      "task": "wic",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "wic",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "Sentence 1: {{sentence1}}\nSentence 2: {{sentence2}}\nQuestion: Is the word '{{sentence1[start1:end1]}}' used in the same way in the two sentences above?\nAnswer:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "no",
        "yes"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "wsc": {
      "task": "wsc",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "wsc.fixed",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "def default_doc_to_text(x):\n    raw_passage = x[\"text\"]\n    # NOTE: HuggingFace span indices are word-based not character-based.\n    pre = \" \".join(raw_passage.split()[: x[\"span2_index\"]])\n    post = raw_passage[len(pre) + len(x[\"span2_text\"]) + 1 :]\n    passage = general_detokenize(pre + \" *{}*\".format(x[\"span2_text\"]) + post)\n    noun = x[\"span1_text\"]\n    pronoun = x[\"span2_text\"]\n    text = (\n        f\"Passage: {passage}\\n\"\n        + f'Question: In the passage above, does the pronoun \"*{pronoun}*\" refer to \"*{noun}*\"?\\n'\n        + \"Answer:\"\n    )\n    return text\n",
      "doc_to_target": "label",
      "doc_to_choice": [
        "no",
        "yes"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "boolq": 2.0,
    "cb": 1.0,
    "copa": 1.0,
    "multirc": 2.0,
    "record": 2.0,
    "sglue_rte": 0.0,
    "wic": 1.0,
    "wsc": 1.0
  },
  "n-shot": {
    "boolq": 0,
    "cb": 0,
    "copa": 0,
    "multirc": 0,
    "record": 0,
    "sglue_rte": 0,
    "wic": 0,
    "wsc": 0
  },
  "higher_is_better": {
    "boolq": {
      "acc": true
    },
    "cb": {
      "acc": true,
      "f1": true
    },
    "copa": {
      "acc": true
    },
    "multirc": {
      "acc": true
    },
    "record": {
      "f1": true,
      "em": true
    },
    "sglue_rte": {
      "acc": true
    },
    "wic": {
      "acc": true
    },
    "wsc": {
      "acc": true
    }
  },
  "n-samples": {
    "copa": {
      "original": 100,
      "effective": 100
    },
    "cb": {
      "original": 56,
      "effective": 56
    },
    "wsc": {
      "original": 104,
      "effective": 104
    },
    "record": {
      "original": 10000,
      "effective": 10000
    },
    "multirc": {
      "original": 4848,
      "effective": 4848
    },
    "boolq": {
      "original": 3270,
      "effective": 3270
    },
    "sglue_rte": {
      "original": 277,
      "effective": 277
    },
    "wic": {
      "original": 638,
      "effective": 638
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=/pscratch/sd/m/mzheng/optimus-cc-checkpoints-finished/2.0B/range_topk/d_0.5_r_0_i_200/hf/,trust_remote_code=True",
    "model_num_parameters": 2019640320,
    "model_dtype": "torch.bfloat16",
    "model_revision": "main",
    "model_sha": "",
    "batch_size": "64",
    "batch_sizes": [],
    "device": "cuda:1",
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": null,
  "date": 1728186362.709242,
  "pretty_env_info": "PyTorch version: 2.2.0a0+81ea7a4\nIs debug build: False\nCUDA used to build PyTorch: 12.3\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.3 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: Could not collect\nCMake version: version 3.28.1\nLibc version: glibc-2.35\n\nPython version: 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0] (64-bit runtime)\nPython platform: Linux-5.14.21-150400.24.81_12.0.87-cray_shasta_c-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: 12.3.107\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA A100-SXM4-80GB\nGPU 1: NVIDIA A100-SXM4-80GB\nGPU 2: NVIDIA A100-SXM4-80GB\nGPU 3: NVIDIA A100-SXM4-80GB\n\nNvidia driver version: 525.105.17\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.9.7\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                       x86_64\nCPU op-mode(s):                     32-bit, 64-bit\nAddress sizes:                      48 bits physical, 48 bits virtual\nByte Order:                         Little Endian\nCPU(s):                             128\nOn-line CPU(s) list:                0-127\nVendor ID:                          AuthenticAMD\nModel name:                         AMD EPYC 7763 64-Core Processor\nCPU family:                         25\nModel:                              1\nThread(s) per core:                 2\nCore(s) per socket:                 64\nSocket(s):                          1\nStepping:                           1\nFrequency boost:                    enabled\nCPU max MHz:                        2450.0000\nCPU min MHz:                        1500.0000\nBogoMIPS:                           4890.95\nFlags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf rapl pni pclmulqdq monitor ssse3 fma cx16 pcid sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 invpcid_single hw_pstate ssbd mba ibrs ibpb stibp vmmcall fsgsbase bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local clzero irperf xsaveerptr rdpru wbnoinvd amd_ppin arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold v_vmsave_vmload vgif v_spec_ctrl umip pku ospke vaes vpclmulqdq rdpid overflow_recov succor smca fsrm\nVirtualization:                     AMD-V\nL1d cache:                          2 MiB (64 instances)\nL1i cache:                          2 MiB (64 instances)\nL2 cache:                           32 MiB (64 instances)\nL3 cache:                           256 MiB (8 instances)\nNUMA node(s):                       4\nNUMA node0 CPU(s):                  0-15,64-79\nNUMA node1 CPU(s):                  16-31,80-95\nNUMA node2 CPU(s):                  32-47,96-111\nNUMA node3 CPU(s):                  48-63,112-127\nVulnerability Gather data sampling: Not affected\nVulnerability Itlb multihit:        Not affected\nVulnerability L1tf:                 Not affected\nVulnerability Mds:                  Not affected\nVulnerability Meltdown:             Not affected\nVulnerability Mmio stale data:      Not affected\nVulnerability Retbleed:             Not affected\nVulnerability Spec rstack overflow: Mitigation; safe RET\nVulnerability Spec store bypass:    Mitigation; Speculative Store Bypass disabled via prctl and seccomp\nVulnerability Spectre v1:           Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:           Mitigation; Retpolines, IBPB conditional, IBRS_FW, STIBP always-on, RSB filling, PBRSB-eIBRS Not affected\nVulnerability Srbds:                Not affected\nVulnerability Tsx async abort:      Not affected\n\nVersions of relevant libraries:\n[pip3] numpy==1.24.4\n[pip3] onnx==1.15.0rc2\n[pip3] optree==0.10.0\n[pip3] pytorch-lightning==2.4.0\n[pip3] pytorch-quantization==2.1.2\n[pip3] torch==2.2.0a0+81ea7a4\n[pip3] torch-tensorrt==2.2.0a0\n[pip3] torchdata==0.7.0a0\n[pip3] torchmetrics==1.4.2\n[pip3] torchtext==0.17.0a0\n[pip3] torchvision==0.17.0a0\n[pip3] triton==2.1.0+6e4932c\n[conda] Could not collect",
  "transformers_version": "4.45.1",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|endoftext|>",
    "50256"
  ],
  "tokenizer_eos_token": [
    "<|endoftext|>",
    "50256"
  ],
  "tokenizer_bos_token": [
    "<|endoftext|>",
    "50256"
  ],
  "eot_token_id": 50256,
  "max_length": 1024,
  "task_hashes": {},
  "model_source": "hf",
  "model_name": "/pscratch/sd/m/mzheng/optimus-cc-checkpoints-finished/2.0B/range_topk/d_0.5_r_0_i_200/hf/",
  "model_name_sanitized": "__pscratch__sd__m__mzheng__optimus-cc-checkpoints-finished__2.0B__range_topk__d_0.5_r_0_i_200__hf__",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 1029717.254215456,
  "end_time": 1030648.038631682,
  "total_evaluation_time_seconds": "930.7844162260881"
}